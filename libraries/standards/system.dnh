#include "./graphics.dnh"

let imgAssetsPath = "./../../../assets/img/";
let fontAssetsPath = "./../../../assets/fonts/";
InstallFont(fontAssetsPath ~ "Revue.ttf");
InstallFont(fontAssetsPath ~ "Russell Square Regular.ttf");

@Initialize {
    SetPauseScriptPath("script/libraries/standards/pause.dnh");
    SetEndSceneScriptPath("script/libraries/standards/end_scene.dnh");
    SetReplaySaveSceneScriptPath("script/libraries/standards/replay_saver");
    StartScript(LoadScript("script/libraries/standards/stg_backgrounds.dnh"));
    
    TRenderSTGFrame;
    TDrawScoreDisplay;
    TDrawPlayerLfSp;
    TDrawPlayerValues;
    TDrawBossInfo;
    TDrawMisc;
}

@Event {
    alternative (GetEventType())
    case (EV_START_BOSS_SPELL) {
        StartScript(LoadScript("script/libraries/standards/magic_circle.dnh"));
    } case (EV_GAIN_SPELL) {

    } case (EV_USER_SYSTEM) {

    }
}

@MainLoop {
    yield;
}

task TRenderSTGFrame {
    let asset = imgAssetsPath ~ "Default_SystemBackground.png";
    let stgFrame = Create2DSpriteA1(asset, BLEND_ALPHA, 0, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
}
task TDrawScoreDisplay {
    let digitCount = 9;
    let asset = imgAssetsPath ~ "spr_thdigits.png";
    let scDigitListSrc = Create2DSpriteList(asset, BLEND_ALPHA, 0.01, 0, 48, 0.60, 0.60);

    let highScoreTxt = CreateTextA2("HISCORE", "Russell Square", 15, 427, 47, 255, 255, 255, 0, 0, 0, 2, true, 0.01);
    let scoreTxt = CreateTextA2("SCORE", "Russell Square", 14, 427, 68, 255, 255, 255, 0, 0, 0, 2, true, 0.01);

    UpdateHighscore(digitCount, scDigitListSrc);
    UpdateScore(digitCount, scDigitListSrc);
}
task TDrawPlayerLfSp {
    let maxItemCount = 8;
    let lifeGraphicArr = [];
    let spellGraphicArr = [];

    let livesTxt = CreateTextA2("Lives", "Russell Square", 13, 428, 100, 227, 36, 220, 0, 0, 0, 2, true, 0.01);
    let spellsTxt = CreateTextA2("Spell", "Russell Square", 13, 428, 124, 37, 234, 37, 0, 0, 0, 2, true, 0.01);

    ascent(i in 0..maxItemCount) {
        let sprLife = Create2DSpriteA2(imgAssetsPath ~ "playerLifeSpell.png", BLEND_ALPHA, 1.0, 0, 0, 34, 34, 0, 0, 34, 34, 500 + (i * 14), 99, 0.5, 0.5, 255);
        let sprSpell = Create2DSpriteA2(imgAssetsPath ~ "playerLifeSpell.png", BLEND_ALPHA, 1.0, 0, 39, 35, 72, 0, 39, 35, 72, 500 + (i * 14), 102, 0.5, 0.5, 255);
        lifeGraphicArr = lifeGraphicArr ~ [sprLife];
        spellGraphicArr = spellGraphicArr ~ [sprSpell];
    }

    UpdatePlayerCount(lifeGraphicArr);
    UpdateSpellCount(spellGraphicArr)
}
task TDrawPlayerValues {
    let digitCount = 5;

    CreateTextA2("Power", "Russell Square", 15, 460, 157, 236, 111, 84, 0, 0, 0, 2, true, 0.01);
    Create2DSpriteA2(imgAssetsPath ~ "playerLifeSpell.png", BLEND_ALPHA, 0.90, 225, 42, 252, 69, 225, 42, 252, 69, 303, 134, 0.60, 0.60, 255);
    let plPowerVal = CreateTextA2("4.00 / 4.00", "Russell Square", 12, 525, 160, 236, 111, 84, 0, 0, 0, 2, true, 0.01);
    CreateTextA2("Value", "Russell Square", 15, 460, 182, 84, 139, 236, 0, 0, 0, 2, true, 0.01);
    Create2DSpriteA2(imgAssetsPath ~ "playerLifeSpell.png", BLEND_ALPHA, 0.90, 225, 5, 250, 32, 225, 5, 250, 32, 303, 180, 0.60, 0.60, 255);
    let plPointVal = CreateTextA2("15000", "Russell Square", 15, 563, 182, 84, 139, 236, 0, 0, 0, 2, true, 0.01);
    CreateTextA2("Graze", "Russell Square", 15, 460, 207, 210, 210, 210, 0, 0, 0, 2, true, 0.01);
    let plGrazeCount = Create2DSpriteList(imgAssetsPath ~ "spr_thdigits.png", BLEND_ALPHA, 0.01, 0, 208, 0.6, 0.6);

    UpdateGraze(digitCount, plGrazeCount);
}
task TDrawBossInfo {
    let bossNameText = CreateTextA1("", "Russell Square", 13, 38, 22, 15, 196, 54, false, 1.0);
    ObjText_SetFontColorBottom(bossNameText, 10, 136, 0);
    TDrawBossTimer;
    UpdateBossName(bossNameText);

}
task TDrawBossTimer {
    let TIMER_DIGITS = 2;
    let currentBossScene = ID_INVALID;
    let digitTextures = Create2DSpriteList(imgAssetsPath ~ "spr_thdigits.png", BLEND_ALPHA, 0.80, 0, 60, 1, 1);

    loop {
        currentBossScene = GetEnemyBossSceneObjectID();
        ObjSpriteList2D_ClearVertexCount(digitTextures);

        if (currentBossScene != ID_INVALID) {
            let currentTimer = ObjEnemyBossScene_GetInfo(currentBossScene, INFO_TIMER);
            currentTimer = min(currentTimer, 99);
            let digitSet = DigitToArray(currentTimer, TIMER_DIGITS);
            ObjSpriteList2D_ClearVertexCount(digitTextures);

            ascent(i in 0..TIMER_DIGITS) {
                let digit = digitSet[i];
                ObjRender_SetX(digitTextures, 175 + i * 16);
                ObjSpriteList2D_SetSourceRect(digitTextures, digit * 24, 0, (digit + 1) * 24.2, 26);
                ObjSpriteList2D_SetDestRect(digitTextures, 0, 0, 24, 25);
                ObjSpriteList2D_AddVertex(digitTextures);
            }
        }
        yield;
    }
}
task TDrawMisc {
    let fpsTxt = CreateTextA2("...", "Russell Square", 10, 0, GetScreenHeight() - 15, 255, 255, 255, 0, 0 , 0, 2, false, 1.0);
    ObjText_SetMaxWidth(fpsTxt, GetScreenWidth() - 8);
    ObjText_SetHorizontalAlignment(fpsTxt, ALIGNMENT_RIGHT);
    
    UpdateFPS(fpsTxt);
}

task UpdateFPS(fpsCounterText) {
    loop {
        let fps = GetCurrentFps();
        let fpsText = vtos("1.2f", fps) ~ "fps";
        ObjText_SetText(fpsCounterText, fpsText);
        yield;
    }
}

task UpdateHighscore(digitCount, sprDigitList) {
    loop {
        let hiScore = GetScore();
        hiScore = min(hiScore, 999999999);
        let digitSet = DigitToArray(hiScore, digitCount);
        ObjSpriteList2D_ClearVertexCount(sprDigitList);

        ascent(i in 0..digitCount) {
            let digit = digitSet[i];
            ObjRender_SetX(sprDigitList, 523 + i * 10);

            ObjSpriteList2D_SetSourceRect(sprDigitList, digit * 24, 0, (digit + 1) * 24.2, 26);
			ObjSpriteList2D_SetDestRect(sprDigitList, 0, 0, 24, 25);
			ObjSpriteList2D_AddVertex(sprDigitList);
        }

        yield;
    }
}

task UpdateScore(digitCount, sprDigitList) {
    loop {
        let score = GetScore();
        score = min(score, 999999999);
        let digitSet = DigitToArray(score, digitCount);
        ObjSpriteList2D_ClearVertexCount(sprDigitList);

        ascent(i in 0..digitCount) {
            let digit = digitSet[i];
            ObjRender_SetX(sprDigitList, 523 + i * 10);

            ObjSpriteList2D_SetSourceRect(sprDigitList, digit * 24, 0, (digit + 1) * 24.2, 26);
			ObjSpriteList2D_SetDestRect(sprDigitList, 0, 0, 24, 25);
			ObjSpriteList2D_AddVertex(sprDigitList);
        }
        yield;
    }
}

task UpdatePlayerPower(powerIndicator) {
    loop {
        let power = GetPlayerPower();
        let powerText = vtos("1.2f", power) ~ " / 4.00";
        ObjText_SetText(powerIndicator, powerText);
        yield;
    }
}

task UpdateGraze(digitCount, sprDigitList) {
    loop {
        let graze = GetGraze();
        graze = min(graze, 99999);
        let digitSet = DigitToArray(graze, digitCount);
        ObjSpriteList2D_ClearVertexCount(sprDigitList);

        ascent(i in 0..digitCount) {
            let digit = digitSet[i];
            ObjRender_SetX(sprDigitList, 563 + i * 10);

            ObjSpriteList2D_SetSourceRect(sprDigitList, digit * 24, 0, (digit + 1) * 24.2, 26);
			ObjSpriteList2D_SetDestRect(sprDigitList, 0, 0, 24, 25);
			ObjSpriteList2D_AddVertex(sprDigitList);
        }
        yield;
    }
}

task UpdatePlayerCount(graphicArr) {
    loop {
        let currPlCount = GetPlayerLife();
        currPlCount = min(currPlCount, 8);
        ascent (i in 0..8) {
            if (i >= currPlCount) {
                ObjSprite2D_SetSourceRect(graphicArr[i], 0, 0, 34, 34);
                break;
            }
            ObjSprite2D_SetSourceRect(graphicArr[i], 162, 0, 193, 32);
        }
        yield;
    }
}

task UpdateSpellCount(graphicArr) {
    loop {
        let currSpCount = GetPlayerSpell();
        currSpCount = min(currSpCount, 8);
        ascent (i in 0..8) {
            if (i >= currSpCount) {
                ObjSprite2D_SetSourceRect(graphicArr[i], 0, 39, 35, 72);
                break;
            }
            ObjSprite2D_SetSourceRect(graphicArr[i], 162, 40, 194, 72);
        }
        yield;
    }
}

task UpdateBossName(bossText) {
    loop {
        ObjText_SetText(bossText, GetCommonData("CURRENT_BOSS", ""));
        yield;
    }
}

function DigitToArray(let digit,let count) {
	let res = [];
	digit = truncate(digit);

	loop {
		let tnum = truncate(digit % 10);
		digit /= 10;
		res = [tnum] ~ res;
		if(truncate(digit) == 0){break;}
	}

	loop(max(0, count - length(res))) {
		res = [0] ~ res;
	}
	return res;
}
