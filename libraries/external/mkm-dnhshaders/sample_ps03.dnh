task TWaveCircle()
{
	let renderTexture = GetReservedRenderTargetName(0);

	let frame = 0; //ƒtƒŒ[ƒ€
	let baseEffectRadius = 128;
	let outerFluct = 16;
	let effectRadius = 0;


	let priEffectMin = 20;
	let priEffectMax = 28;

	SetInvalidRenderPriorityA1(priEffectMin, priEffectMax);

	let frameWidth = GetStgFrameWidth();
	let frameHeight = GetStgFrameHeight();
	let frameLeft = GetStgFrameLeft();
	let frameRight = frameLeft + frameWidth;
	let frameTop = GetStgFrameTop();
	let frameBottom = frameTop + frameHeight;

	let objWave = ObjPrim_Create(OBJ_SPRITE_2D);
	Obj_SetRenderPriorityI(objWave, 25);
	ObjPrim_SetTexture(objWave, renderTexture);
	ObjSprite2D_SetSourceRect(objWave, frameLeft, frameTop, frameRight, frameBottom);
	ObjSprite2D_SetDestRect(objWave, 0, 0, frameWidth, frameHeight);
	Obj_SetRenderPriorityI(objWave, priEffectMax + 1);

	let pathShader = GetCurrentScriptDirectory ~ "sample_ps03_hlsl.dnh";
	ObjShader_SetShaderF(objWave, pathShader);
	ObjShader_SetTechnique(objWave, "TecWave");

	let objEnemy = GetEnemyBossObjectID[0];
	while(ObjEnemy_GetInfo(objEnemy, INFO_LIFE) > 0)
	{
		effectRadius = baseEffectRadius + outerFluct * sin(frame*4);

		let enemyX = ObjMove_GetX(objEnemy);
		let enemyY = ObjMove_GetY(objEnemy);

		RenderToTextureA1(renderTexture, priEffectMin, priEffectMax, true);

		ObjShader_SetFloat(objWave, "frame_", frame);
		ObjShader_SetFloat(objWave, "enemyX_", enemyX + frameLeft);
		ObjShader_SetFloat(objWave, "enemyY_", enemyY + frameTop);
		ObjShader_SetFloat(objWave, "waveRadius_", effectRadius);

		frame++;
		yield;
	}

	Obj_Delete(objWave);
	ClearInvalidRenderPriority();
}
